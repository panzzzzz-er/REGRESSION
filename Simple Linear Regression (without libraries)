{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SIMPLE LINEAR REGRESSION FROM SCRATCH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sb\n",
    "import matplotlib.pyplot as plt\n",
    "import math "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x   y\n",
       "0  0   1\n",
       "1  1   3\n",
       "2  2   2\n",
       "3  3   5\n",
       "4  4   7\n",
       "5  5   8\n",
       "6  6   8\n",
       "7  7   9\n",
       "8  8  10\n",
       "9  9  12"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = {\n",
    "    'x' : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
    "    'y' : [1, 3, 2, 5, 7, 8, 8, 9, 10, 12]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# if in case the data is in a csv file, above operations can also be done as:\n",
    "# df= pd.read_csv('data.csv')\n",
    "# df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x  y\n",
       "0  0  1\n",
       "1  1  3\n",
       "2  2  2\n",
       "3  3  5\n",
       "4  4  7"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df.x, df.y)\n",
    "plt.title('x vs y')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def linear_regression(df):\n",
    "    x = df.x\n",
    "    y = df.y     \n",
    "    N = len(x)\n",
    "    x_mean = x.mean()\n",
    "    y_mean = y.mean()\n",
    "    \n",
    "    B1_num = ((x - x_mean) * (y - y_mean)).sum()\n",
    "    B1_den = ((x - x_mean)**2).sum()\n",
    "    B1 = B1_num / B1_den\n",
    "    \n",
    "    B0 = y_mean - (B1*x_mean)\n",
    "    \n",
    "    reg_line = 'y = {} + {}x'.format(round(B0, 3), round(B1, 3))\n",
    "    \n",
    "    return (B0, B1, reg_line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def corr_coef(df):\n",
    "    x = df.x \n",
    "    y = df.y\n",
    "    \n",
    "    N = len(x)\n",
    "    \n",
    "    num = (N * (x*y).sum()) - (x.sum() * y.sum())\n",
    "    den = np.sqrt((N * (x**2).sum() - x.sum()**2) * (N * (y**2).sum() - y.sum()**2))\n",
    "    R = num / den\n",
    "    return R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def residual_sum_square(df, B0, B1):\n",
    "    RSS = 0\n",
    "    x = df.x\n",
    "    y = df.y\n",
    "\n",
    "    for i in range(len(df)):\n",
    "        y_pred = B0 + x[i]*B1\n",
    "        RSS = pow((y[i] - y_pred), 2)\n",
    "    \n",
    "    return RSS\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def root_mean_squared_error(df):\n",
    "    RMSE = 0\n",
    "\n",
    "    x = df.x\n",
    "    y = df.y\n",
    "    B0, B1, reg_line = linear_regression(df)\n",
    "    sq_err = 0\n",
    "\n",
    "    sq_err = residual_sum_square(df, B0, B1)\n",
    "\n",
    "    mean_sq_err = sq_err/len(df)    \n",
    "    RMSE = math.sqrt(mean_sq_err)\n",
    "\n",
    "    return RMSE\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict (df, x_in):\n",
    "    B0, B1, reg_line = linear_regression(df)\n",
    "    y_pred = B0 + B1*x_in\n",
    "\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B0=1.236, B1=1.17\n",
      "Regression Line:  y = 1.236 + 1.17x\n",
      "Correlation Coef. R =  0.976\n",
      "Determination Coef. R^2 =  0.953\n",
      "RSS =  0.056\n",
      "RSME =  0.075\n",
      "y_pred for x=10 : 12.93\n"
     ]
    }
   ],
   "source": [
    "x_in = 10\n",
    "\n",
    "B0, B1, reg_line = linear_regression(df)\n",
    "R = corr_coef(df)\n",
    "RSS = residual_sum_square(df, B0, B1)\n",
    "RSME = root_mean_squared_error(df)\n",
    "y_pred = predict(df, x_in)\n",
    "\n",
    "\n",
    "print(\"B0={}, B1={}\".format(round(B0, 3), round(B1, 3)))\n",
    "print('Regression Line: ', reg_line)\n",
    "print('Correlation Coef. R = ', round(R, 3))\n",
    "print('Determination Coef. R^2 = ', round(R*R, 3))\n",
    "print(\"RSS = \", round(RSS, 3))\n",
    "print(\"RSME = \", round(RSME, 3))\n",
    "print(\"y_pred for x={} : {}\".format(x_in, round(y_pred, 2)) )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = df.x\n",
    "y = df.y\n",
    "\n",
    "plt.scatter(x, y, s=30, linewidths=1, edgecolor='black')\n",
    "plt.title('line of linear regression x vs y')\n",
    "plt.xlabel('y')\n",
    "plt.ylabel('x')\n",
    "plt.plot(x, B0 + B1*x, c = 'r', linewidth=2, alpha=0.5, solid_capstyle='round')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "a9cff5a362bc38ef45d817ae74b1af54d6a076e3d773891282bce078b815ba34"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
